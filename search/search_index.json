{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Zenworks internal documentation \u00b6 This is the internal documentation for Zenworks' technical teams. New to the team? Read how to get started developing . This is documentation purely for technical teams. The company handbook, which provides details for the whole org, can be viewed at handbook.hq.zenworks.uk . Applications \u00b6 todo Developing \u00b6 Starting a project \u00b6 We have pages for that! What are you creating? Create an application Create a library","title":"Home"},{"location":"#zenworks-internal-documentation","text":"This is the internal documentation for Zenworks' technical teams. New to the team? Read how to get started developing . This is documentation purely for technical teams. The company handbook, which provides details for the whole org, can be viewed at handbook.hq.zenworks.uk .","title":"Zenworks internal documentation"},{"location":"#applications","text":"todo","title":"Applications"},{"location":"#developing","text":"","title":"Developing"},{"location":"#starting-a-project","text":"We have pages for that! What are you creating? Create an application Create a library","title":"Starting a project"},{"location":"development/create/app/","text":"todo","title":"App"},{"location":"development/create/library/","text":"todo","title":"Library"},{"location":"manuals/licensing/","text":"Guidelines for repositories containing code \u00b6 Each repository should include a licence file. This should be called LICENSE . \"License\" is the US English spelling. GitHub will still show licence details for the British English spelling, but we use the American spelling for standardisation reasons. You should specify the licence and link to it in the repository's README. It is typical to include this information at the very end of a README under a 'Licence' heading. Use MIT \u00b6 For open source projects, we use the MIT License . Make sure the licence content is included in full, including the title \"The MIT License\", so that readers are quickly able to see what licence is being used. Copyright Notice \u00b6 For example, Copyright (c) Elliott Mozley (trading as Zenworks) The year should be the year the code was first published. Where the code is continually updated with significant changes, you can show the year as a period from first to most recent update, for example 2015-2019. Once Zenworks is registered, this needs to be changed immediately so that copyright is under Zenworks, not Elliott Mozley (trading as Zenworks)","title":"Licensing"},{"location":"manuals/licensing/#guidelines-for-repositories-containing-code","text":"Each repository should include a licence file. This should be called LICENSE . \"License\" is the US English spelling. GitHub will still show licence details for the British English spelling, but we use the American spelling for standardisation reasons. You should specify the licence and link to it in the repository's README. It is typical to include this information at the very end of a README under a 'Licence' heading.","title":"Guidelines for repositories containing code"},{"location":"manuals/licensing/#use-mit","text":"For open source projects, we use the MIT License . Make sure the licence content is included in full, including the title \"The MIT License\", so that readers are quickly able to see what licence is being used.","title":"Use MIT"},{"location":"manuals/licensing/#copyright-notice","text":"For example, Copyright (c) Elliott Mozley (trading as Zenworks) The year should be the year the code was first published. Where the code is continually updated with significant changes, you can show the year as a period from first to most recent update, for example 2015-2019. Once Zenworks is registered, this needs to be changed immediately so that copyright is under Zenworks, not Elliott Mozley (trading as Zenworks)","title":"Copyright Notice"},{"location":"manuals/readme-guidance/","text":"There should be a README for every Zenworks GitHub repository. A user expects a README to help them: understand what the project is evaluate whether the project is useful for them learn how to use the project understand how to contribute to the project You should write READMEs in Plain English and define any technical terms that may be unfamiliar to someone new to the project. Avoid using terms like 'just' or 'simply' when writing your README. You should not assume your user has any prior knowledge of your project. Length of your README \u00b6 A README should be an overview and list of instructions to help someone get started with your project. If you find yourself writing a lot of content for your README, consider moving some of the more detailed documentation, such as API reference information or configuration advice, into a separate document. We like to include these in a doc folder within the same repository and link to them from the README. Structuring your README \u00b6 Use the following structure for your READMEs: # README template This is a template to follow when you write a README for your GitHub repository. Refer to the [ guidance on writing READMEs ]( https://docs.hq.zenworks.uk/manuals/readme-guidance ) for more information. ## Title your README clearly Give the user a clear sign they\u2019re looking at the right thing. For example, `Helpdesk webchat prototype` not `chatbot-v1` . ## Introduce the project Use the start of your README to describe your project and what it does. Focus on what your project provides to users or other developers. You can also explain how your project links to other things. For example: \\`\\`\\` help-center is a Node.JS app built on a MySQL database. It\u2019s deployed in 2 modes: 'admin' for publishers to create and manage content 'frontend' for rendering some content under https://help-center.zenworks.uk \\`\\`\\` Include any limitations up front so the user can evaluate whether the project meets all their needs. This includes any version information. You can also add a table of contents to the start of your README to help users jump to the information they need. ## Share examples If applicable, consider adding screenshots or links to live examples of your project so users can see how other people use your project. You should provided a screenshot of the user-end project. ## Explain any prerequisites If applicable, list the items a user needs to be able to use your project, such as a certain version of a programming language. It can be useful to link to documentation on how to install these items. This could be under a heading such as `Before you start` . If your project depends on other systems or projects, you should list these technical dependencies. For example: \\`\\`\\` - [zenworksuk/other-repo]() - provides some downstream service - [redis]() - provides a backing service for work queues \\`\\`\\` ## Explain how to get started Next tell the user how to get started with your project. This is often a numbered list on how to install the project and run it locally. List one action per step. Follow each step with example code if possible as some users will want to copy and paste directly from your README. For example: \\`\\`\\` 1. Install express. `npm i express` \\`\\`\\` These instructions should help your users get to \u201chello world\u201d or be able to run the project locally. If you want to provide more advanced documentation, you could: - add a configuration section to help the user amend the project for their own use - speak to a technical writer about publishing separate documentation ## Help users configure and deploy the project for their needs If applicable, include a link to any editable project configuration files. You should do this shortly after the \u2018getting started\u2019 guidance. You could also: - list any environment variables available in a table - link to more detailed configuration documentation in a different file Describe how to deploy the project if applicable. ## Explain how to test the project Add information on how users can check they can run the project successfully. For example, instructions for how to run a test suite. This can be a useful place to list error messages and suggested fixes. ## Share additional information This is a good place to link to additional or related information if it\u2019s available such as API documentation or a separate documentation website. ## Show users where to get support Let the user know where they can go for help using the project. This could be a support email address, community forum, or issue tracker attached to the repository. ## Explain how users can contribute Let users know they can contribute. Consider adding a contribution file (often named `CONTRIBUTING.md` ) with more detail, or state how to contribute in the README. You can also have a `CODE_OF_CONDUCT.md` file linking to expected communication and behaviour standards expected of contributors. All open repositories should have a code of conduct. !!! tip \"\" A standard code of conduct is to come. In the mean time, we suggest using the Contributor Covenant You can also credit individual contributors or link to other repositories that inspired your project. ## Link to the licence file(s) All open repositories [ must have a copyright licence ]( https://docs.hq.zenworks.uk/manuals/licensing ). Under a `licence` heading specify the license you\u2019re using and link to the licence file. Use the [ MIT License ]( https://opensource.org/licenses/MIT ) if your repository contains software code. This license also covers documentation in the repository about that code. Test your documentation \u00b6 Test your README instructions before you publish to make sure users can follow your documentation. You can also ask a: member of your team to try the instructions and make sure they work technical writer to review the content","title":"Readme guidance"},{"location":"manuals/readme-guidance/#length-of-your-readme","text":"A README should be an overview and list of instructions to help someone get started with your project. If you find yourself writing a lot of content for your README, consider moving some of the more detailed documentation, such as API reference information or configuration advice, into a separate document. We like to include these in a doc folder within the same repository and link to them from the README.","title":"Length of your README"},{"location":"manuals/readme-guidance/#structuring-your-readme","text":"Use the following structure for your READMEs: # README template This is a template to follow when you write a README for your GitHub repository. Refer to the [ guidance on writing READMEs ]( https://docs.hq.zenworks.uk/manuals/readme-guidance ) for more information. ## Title your README clearly Give the user a clear sign they\u2019re looking at the right thing. For example, `Helpdesk webchat prototype` not `chatbot-v1` . ## Introduce the project Use the start of your README to describe your project and what it does. Focus on what your project provides to users or other developers. You can also explain how your project links to other things. For example: \\`\\`\\` help-center is a Node.JS app built on a MySQL database. It\u2019s deployed in 2 modes: 'admin' for publishers to create and manage content 'frontend' for rendering some content under https://help-center.zenworks.uk \\`\\`\\` Include any limitations up front so the user can evaluate whether the project meets all their needs. This includes any version information. You can also add a table of contents to the start of your README to help users jump to the information they need. ## Share examples If applicable, consider adding screenshots or links to live examples of your project so users can see how other people use your project. You should provided a screenshot of the user-end project. ## Explain any prerequisites If applicable, list the items a user needs to be able to use your project, such as a certain version of a programming language. It can be useful to link to documentation on how to install these items. This could be under a heading such as `Before you start` . If your project depends on other systems or projects, you should list these technical dependencies. For example: \\`\\`\\` - [zenworksuk/other-repo]() - provides some downstream service - [redis]() - provides a backing service for work queues \\`\\`\\` ## Explain how to get started Next tell the user how to get started with your project. This is often a numbered list on how to install the project and run it locally. List one action per step. Follow each step with example code if possible as some users will want to copy and paste directly from your README. For example: \\`\\`\\` 1. Install express. `npm i express` \\`\\`\\` These instructions should help your users get to \u201chello world\u201d or be able to run the project locally. If you want to provide more advanced documentation, you could: - add a configuration section to help the user amend the project for their own use - speak to a technical writer about publishing separate documentation ## Help users configure and deploy the project for their needs If applicable, include a link to any editable project configuration files. You should do this shortly after the \u2018getting started\u2019 guidance. You could also: - list any environment variables available in a table - link to more detailed configuration documentation in a different file Describe how to deploy the project if applicable. ## Explain how to test the project Add information on how users can check they can run the project successfully. For example, instructions for how to run a test suite. This can be a useful place to list error messages and suggested fixes. ## Share additional information This is a good place to link to additional or related information if it\u2019s available such as API documentation or a separate documentation website. ## Show users where to get support Let the user know where they can go for help using the project. This could be a support email address, community forum, or issue tracker attached to the repository. ## Explain how users can contribute Let users know they can contribute. Consider adding a contribution file (often named `CONTRIBUTING.md` ) with more detail, or state how to contribute in the README. You can also have a `CODE_OF_CONDUCT.md` file linking to expected communication and behaviour standards expected of contributors. All open repositories should have a code of conduct. !!! tip \"\" A standard code of conduct is to come. In the mean time, we suggest using the Contributor Covenant You can also credit individual contributors or link to other repositories that inspired your project. ## Link to the licence file(s) All open repositories [ must have a copyright licence ]( https://docs.hq.zenworks.uk/manuals/licensing ). Under a `licence` heading specify the license you\u2019re using and link to the licence file. Use the [ MIT License ]( https://opensource.org/licenses/MIT ) if your repository contains software code. This license also covers documentation in the repository about that code.","title":"Structuring your README"},{"location":"manuals/readme-guidance/#test-your-documentation","text":"Test your README instructions before you publish to make sure users can follow your documentation. You can also ask a: member of your team to try the instructions and make sure they work technical writer to review the content","title":"Test your documentation"},{"location":"manuals/release-notes/","text":"When you publish a new version of your code , you should also publish a release note that tells users what's changed and how to update from their current version. You can publish a release note as either a: GitHub release note markdown file in the root directory of your release Structure your release note so it has headings for: breaking changes - where users must change their code to avoid it breaking after they update new features bug fixes Write release notes in full British English (except for things like CSS attributes, e.g. background-color ). Be clear and concise, use the active voice and address your users directly. You may want to get help from a technical writer. Use an active verb-based heading for each change, and to group related changes. For example 'Update file paths'. For each change, start by telling your users directly how the change affects them. Start sentences with: \"You can now...\" \"You can no longer...\" \"The API now...\" or \"The API no longer...\" - if you need to talk about an element directly, for example when you're describing a bug fix For breaking changes, start sentences with: \"You should...\" \"You can change...\" - if it's one of several options \"Change...\" - if it's the only option \"You must change...\" - if something will go wrong otherwise You should avoid: writing from your team's perspective - avoid \"We've fixed...\", \"We've added\", or \"Fixed a bug where...\" links to 'further guidance' - your release note should contain all the guidance that's essential to updating in-depth reasons for changes - add a link to a pull request, a blog post or your documentation instead the passive voice images You should also write a README for repositories . Using code examples \u00b6 You should only include 'after' code, not 'before' code. This means it's easier for users to know which code to copy and paste, and to check if they've made the changes correctly. Lead into a code example with either: a colon - if it's the exact code a user should use In your assets path, add afolder/ : /node_modules/afolder/assets 'For example' - if the user's code may be different to the example: Add an assets- prefix to data-module attribute values. For example: < div data-module = \"assets-section\" > Guidance outside Zenworks \u00b6 You can find more information from: learning to love release notes - a talk at the 2018 Write the Docs conference the how to write release notes blog - a post by a technical writer at Google","title":"Release notes"},{"location":"manuals/release-notes/#using-code-examples","text":"You should only include 'after' code, not 'before' code. This means it's easier for users to know which code to copy and paste, and to check if they've made the changes correctly. Lead into a code example with either: a colon - if it's the exact code a user should use In your assets path, add afolder/ : /node_modules/afolder/assets 'For example' - if the user's code may be different to the example: Add an assets- prefix to data-module attribute values. For example: < div data-module = \"assets-section\" >","title":"Using code examples"},{"location":"manuals/release-notes/#guidance-outside-zenworks","text":"You can find more information from: learning to love release notes - a talk at the 2018 Write the Docs conference the how to write release notes blog - a post by a technical writer at Google","title":"Guidance outside Zenworks"},{"location":"standards/programming-languages/","text":"We use JavaScript (Node) as our primary programming language. TypeScript should be known by engineers as we do occasionally use it. We use Nuxt.js as our primary frontend framework. We use Express as our primary backend framework. We are working on our own opinionated Express wrapper called Turbo stub","title":"Programming languages"},{"location":"standards/pull-requests/","text":"todo","title":"Pull requests"},{"location":"standards/source-code/","text":"todo","title":"Source code"}]}